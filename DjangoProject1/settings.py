"""
Django settings for DjangoProject1 project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

from django.contrib import staticfiles

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)2y=-ps@hks784@cz9c%ak$nm10c^eyrt8-9qi69h$-)e8fnv8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Specifies the list of host/domain names that this Django site can serve.
# 'localhost' and '127.0.0.1' are for local development.
# 'jiahaoli-finalproject.onrender.com' is the deployed production domain.
ALLOWED_HOSTS = ['localhost','127.0.0.1','jiahaoli-finalproject.onrender.com']

# Automated generated by Django
# App Registration
# A list of all Django applications that are activated in this project.
# These include default Django apps (like admin, auth, sessions, etc.)
# and a custom app named 'FinalProject' located in the FinalProject directory.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'FinalProject.apps.FinalProjectConfig',

]

# Automated generated by Django
# A list of middleware components used by Django.
# Middleware is a framework of hooks into Django's request/response processing.
# Each middleware component is executed in the order listed.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Specifies the Python module that contains the root URL configuration for the project.
# Django uses this module to determine how to route URLs to views.
ROOT_URLCONF = 'DjangoProject1.urls'


# Configuration for Django's template engine.
# - BACKEND: Specifies the template engine backend to use.
# - DIRS: A list of directories where Django will look for templates (in this case, inside FinalProject/templates).
# - APP_DIRS: If True, Django will look for templates in each app's templates/ directory.
# - OPTIONS: Additional settings, including context processors that make variables available in all templates.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'FinalProject/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoProject1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import os
import dj_database_url

# Identify if the app run in Render environment
# If yes, connect to the postgresql server provided by render
if os.getenv("RENDER") == "true":
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get("DATABASE_URL"),
            engine='django.db.backends.postgresql'
        )
    }

# If not, connect to local database server
# Specifies the details of the database
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'finalproject',
            'USER': 'root',
            'PASSWORD': '',
            'HOST': '127.0.0.1',
            'PORT': '3306',
            'OPTIONS': {
                'charset': 'utf8mb4',
            }
        }
    }

# Automated generated by Django
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
# This part is inner function
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'FinalProject/static')
]


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  #
]